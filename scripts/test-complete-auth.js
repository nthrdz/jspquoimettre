require('dotenv-flow').config({
  path: './',
  default_node_env: 'development',
  silent: true
})
const { createClient } = require('@supabase/supabase-js')

async function testCompleteAuth() {
  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  )

  try {
    console.log('üß™ Test complet de l\'authentification Supabase...\n')

    // Test 1: Configuration de base
    console.log('1Ô∏è‚É£ Test de la configuration de base...')
    console.log(`   ‚úÖ Supabase URL: ${process.env.NEXT_PUBLIC_SUPABASE_URL}`)
    console.log(`   ‚úÖ Anon Key: ${process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? 'D√©fini' : 'Non d√©fini'}`)
    console.log(`   ‚úÖ Service Key: ${process.env.SUPABASE_SERVICE_ROLE_KEY ? 'D√©fini' : 'Non d√©fini'}`)

    // Test 2: Connexion Supabase
    console.log('\n2Ô∏è‚É£ Test de connexion Supabase...')
    const { data, error } = await supabase.auth.getSession()
    if (error) {
      console.log(`   ‚ùå Erreur: ${error.message}`)
    } else {
      console.log('   ‚úÖ Connexion Supabase r√©ussie')
    }

    // Test 3: Configuration OAuth
    console.log('\n3Ô∏è‚É£ Test de la configuration OAuth...')
    const googleEnabled = process.env.NEXT_PUBLIC_GOOGLE_OAUTH_ENABLED === 'true'
    const githubEnabled = process.env.NEXT_PUBLIC_GITHUB_OAUTH_ENABLED === 'true'
    const discordEnabled = process.env.NEXT_PUBLIC_DISCORD_OAUTH_ENABLED === 'true'

    console.log(`   ${googleEnabled ? '‚úÖ' : '‚ö†Ô∏è'} Google OAuth: ${googleEnabled ? 'Activ√©' : 'Non activ√©'}`)
    console.log(`   ${githubEnabled ? '‚úÖ' : '‚ö†Ô∏è'} GitHub OAuth: ${githubEnabled ? 'Activ√©' : 'Non activ√©'}`)
    console.log(`   ${discordEnabled ? '‚úÖ' : '‚ö†Ô∏è'} Discord OAuth: ${discordEnabled ? 'Activ√©' : 'Non activ√©'}`)

    // Test 4: URLs de redirection
    console.log('\n4Ô∏è‚É£ URLs de redirection recommand√©es:')
    console.log('   üîó Site URL: http://localhost:3001')
    console.log('   üîÑ Redirect URLs:')
    console.log('      - http://localhost:3001/dashboard')
    console.log('      - http://localhost:3001/auth/callback')
    console.log('      - http://localhost:3001/coaching')
    console.log('      - http://localhost:3001/galerie')

    // Test 5: Configuration des emails
    console.log('\n5Ô∏è‚É£ Configuration des emails:')
    console.log('   üìß Activez "Enable email confirmations" dans Supabase Dashboard')
    console.log('   üìß Personnalisez les templates d\'email si souhait√©')

    // Test 6: Instructions de test
    console.log('\n6Ô∏è‚É£ Instructions de test:')
    console.log('   üß™ Testez l\'inscription: http://localhost:3001/signup')
    console.log('   üß™ Testez la connexion: http://localhost:3001/login')
    console.log('   üß™ Testez Google OAuth: Cliquez sur "Continuer avec Google"')
    console.log('   üß™ V√©rifiez la redirection vers /dashboard')

    // Test 7: V√©rification des pages
    console.log('\n7Ô∏è‚É£ Test des pages web...')
    try {
      const response = await fetch('http://localhost:3001')
      if (response.ok) {
        console.log('   ‚úÖ Page d\'accueil accessible')
      } else {
        console.log(`   ‚ùå Erreur page d\'accueil: ${response.status}`)
      }
    } catch (error) {
      console.log(`   ‚ö†Ô∏è Serveur non d√©marr√©: ${error.message}`)
    }

    console.log('\nüéâ Test termin√©!')
    console.log('\nüìù Prochaines √©tapes:')
    console.log('1. Configurez les URLs dans Supabase Dashboard')
    console.log('2. Activez les providers OAuth souhait√©s')
    console.log('3. Activez l\'envoi d\'emails de confirmation')
    console.log('4. Testez manuellement sur votre site')

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message)
  }
}

testCompleteAuth()