require('dotenv-flow').config({
  path: './',
  default_node_env: 'development',
  silent: true
})
const { PrismaClient } = require('@prisma/client')
const { createClient } = require('@supabase/supabase-js')

async function fixProfileForeignKeys() {
  const prisma = new PrismaClient()
  
  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY,
    {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      }
    }
  )

  try {
    console.log('üîß Correction des cl√©s √©trang√®res des profils...\n')

    // R√©cup√©rer tous les profils
    const profiles = await prisma.profile.findMany()
    console.log(`üìä ${profiles.length} profils trouv√©s`)

    // R√©cup√©rer tous les utilisateurs Supabase Auth
    const { data: authUsers, error: authError } = await supabase.auth.admin.listUsers()
    if (authError) {
      console.log('‚ùå Erreur lors de la r√©cup√©ration des utilisateurs Supabase:', authError.message)
      return
    }

    console.log(`üìä ${authUsers.users.length} utilisateurs Supabase trouv√©s`)

    // Cr√©er un mapping email -> ID Supabase
    const emailToSupabaseId = {}
    authUsers.users.forEach(user => {
      emailToSupabaseId[user.email] = user.id
    })

    // Mettre √† jour les profils avec les nouveaux IDs
    for (const profile of profiles) {
      // Trouver l'utilisateur correspondant par email
      const user = await prisma.user.findUnique({
        where: { id: profile.userId }
      })

      if (user && emailToSupabaseId[user.email]) {
        const newUserId = emailToSupabaseId[user.email]
        console.log(`üîÑ Mise √† jour du profil ${profile.username} avec l'ID Supabase ${newUserId}`)
        
        await prisma.profile.update({
          where: { id: profile.id },
          data: { userId: newUserId }
        })
        
        console.log(`‚úÖ Profil ${profile.username} mis √† jour`)
      } else {
        console.log(`‚ö†Ô∏è Utilisateur non trouv√© pour le profil ${profile.username}`)
      }
    }

    // Maintenant supprimer les anciens utilisateurs
    console.log('\nüóëÔ∏è Suppression des anciens utilisateurs...')
    const oldUsers = await prisma.user.findMany()
    for (const user of oldUsers) {
      await prisma.user.delete({
        where: { id: user.id }
      })
      console.log(`‚úÖ Utilisateur ${user.email} supprim√©`)
    }

    console.log('\nüéâ Correction termin√©e!')
    console.log('üìù V√©rifiez maintenant dans Supabase Dashboard > Authentication')

  } catch (error) {
    console.error('‚ùå Erreur lors de la correction:', error.message)
  } finally {
    await prisma.$disconnect()
  }
}

fixProfileForeignKeys()
