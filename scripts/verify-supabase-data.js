require('dotenv-flow').config({
  path: './',
  default_node_env: 'development',
  silent: true
})
const { PrismaClient } = require('@prisma/client')
const { createClient } = require('@supabase/supabase-js')

async function verifySupabaseData() {
  const prisma = new PrismaClient()
  
  try {
    console.log('üîç V√©rification des donn√©es dans Supabase...\n')
    
    // 1. V√©rifier via Prisma (qui utilise DATABASE_URL de Supabase)
    console.log('1Ô∏è‚É£ V√©rification via Prisma (DATABASE_URL Supabase)...')
    const users = await prisma.user.findMany({
      include: { profile: true },
      orderBy: { createdAt: 'desc' },
      take: 10
    })
    
    console.log(`   ‚úÖ ${users.length} utilisateurs trouv√©s via Prisma`)
    console.log('\nüìã Derniers utilisateurs (via Prisma):')
    users.forEach((user, index) => {
      console.log(`   ${index + 1}. ${user.email}`)
      console.log(`      Nom: ${user.name}`)
      console.log(`      Username: ${user.profile?.username || 'N/A'}`)
      console.log(`      Plan: ${user.profile?.plan || 'N/A'}`)
      console.log(`      Cr√©√©: ${user.createdAt.toLocaleDateString()}`)
      console.log('')
    })
    
    // 2. V√©rifier l'URL de la base de donn√©es
    const dbUrl = process.env.DATABASE_URL
    if (dbUrl && dbUrl.includes('supabase.co')) {
      const projectMatch = dbUrl.match(/db\.([^.]+)\.supabase\.co/)
      if (projectMatch) {
        const projectId = projectMatch[1]
        console.log('2Ô∏è‚É£ Configuration Supabase:')
        console.log(`   ‚úÖ DATABASE_URL pointe vers Supabase`)
        console.log(`   Project ID: ${projectId}`)
        console.log(`   URL Dashboard: https://supabase.com/dashboard/project/${projectId}`)
        console.log('\nüìù Pour voir les donn√©es dans Supabase Dashboard:')
        console.log(`   1. Allez sur https://supabase.com/dashboard`)
        console.log(`   2. S√©lectionnez le projet: ${projectId}`)
        console.log(`   3. Allez dans "Table Editor"`)
        console.log(`   4. Cliquez sur la table "User" pour voir les utilisateurs`)
        console.log(`   5. Cliquez sur la table "Profile" pour voir les profils`)
      }
    } else {
      console.log('‚ö†Ô∏è  DATABASE_URL ne pointe pas vers Supabase')
      console.log(`   URL actuelle: ${dbUrl ? dbUrl.substring(0, 30) + '...' : 'Non d√©finie'}`)
    }
    
    // 3. V√©rifier via Supabase Client (si possible)
    console.log('\n3Ô∏è‚É£ Test de connexion directe Supabase...')
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
    const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
    
    if (supabaseUrl && supabaseAnonKey) {
      try {
        const supabase = createClient(supabaseUrl, supabaseAnonKey)
        // Note: Supabase client ne peut pas acc√©der directement aux tables Prisma
        // car elles utilisent Prisma naming conventions
        console.log('   ‚úÖ Cl√©s Supabase configur√©es')
        console.log(`   URL: ${supabaseUrl}`)
        console.log('   ‚ö†Ô∏è  Note: Les tables Prisma ne sont pas directement accessibles via Supabase Client')
        console.log('   üí° Utilisez Prisma Studio ou Supabase Dashboard pour voir les donn√©es')
      } catch (error) {
        console.log(`   ‚ùå Erreur Supabase Client: ${error.message}`)
      }
    } else {
      console.log('   ‚ö†Ô∏è  Cl√©s Supabase non configur√©es')
    }
    
    console.log('\n‚úÖ V√©rification termin√©e!')
    console.log('\nüí° Les donn√©es sont bien stock√©es dans Supabase via Prisma.')
    console.log('   Pour voir les donn√©es dans Supabase Dashboard, utilisez le lien ci-dessus.')
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error.message)
    console.error('\nüîß V√©rifiez que:')
    console.error('   1. DATABASE_URL est correct dans .env.local')
    console.error('   2. La base de donn√©es Supabase est accessible')
    console.error('   3. Les migrations Prisma sont √† jour')
  } finally {
    await prisma.$disconnect()
  }
}

verifySupabaseData()
